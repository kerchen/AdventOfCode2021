import pytest

from octogrid import Octogrid


levels_after_steps_test_data = [
    (["000",
      "000",
      "000"],
     0,
     ["000",
      "000",
      "000"]),
    (["000",
      "000",
      "000"],
     1,
     ["111",
      "111",
      "111"]),
    (["900",
      "000",
      "000"],
     1,
     ["021",
      "221",
      "111"]),
    (["000",
      "090",
      "000"],
     1,
     ["222",
      "202",
      "222"]),
    (["11111",
      "19991",
      "19191",
      "19991",
      "11111"],
     2,
     ["45654",
      "51115",
      "61116",
      "51115",
      "45654"]),
    (["5483143223",
      "2745854711",
      "5264556173",
      "6141336146",
      "6357385478",
      "4167524645",
      "2176841721",
      "6882881134",
      "4846848554",
      "5283751526"],
     3,
     ["0050900866",
      "8500800575",
      "9900000039",
      "9700000041",
      "9935080063",
      "7712300000",
      "7911250009",
      "2211130000",
      "0421125000",
      "0021119000"]),
    (["5483143223",
      "2745854711",
      "5264556173",
      "6141336146",
      "6357385478",
      "4167524645",
      "2176841721",
      "6882881134",
      "4846848554",
      "5283751526"],
     100,
     ["0397666866",
      "0749766918",
      "0053976933",
      "0004297822",
      "0004229892",
      "0053222877",
      "0532222966",
      "9322228966",
      "7922286866",
      "6789998766"])
]


@pytest.mark.parametrize("input_data, steps, expected_values", levels_after_steps_test_data)
def test_levels_are_at_expected_values_after_steps(input_data, steps, expected_values):
    g = Octogrid(input_data)

    g.step_time(steps)
    expected_grid = Octogrid(expected_values)
    assert g == expected_grid


flahes_after_steps_test_data = [
    (["000",
      "000",
      "000"],
     0, 0),
    (["000",
      "000",
      "000"],
     1, 0),
    (["900",
      "000",
      "000"],
     1, 1),
    (["000",
      "090",
      "000"],
     1, 1),
    (["11111",
      "19991",
      "19191",
      "19991",
      "11111"],
     2, 9),
    (["5483143223",
      "2745854711",
      "5264556173",
      "6141336146",
      "6357385478",
      "4167524645",
      "2176841721",
      "6882881134",
      "4846848554",
      "5283751526"],
     3, 80),
    (["5483143223",
      "2745854711",
      "5264556173",
      "6141336146",
      "6357385478",
      "4167524645",
      "2176841721",
      "6882881134",
      "4846848554",
      "5283751526"],
     100, 1656),
]


@pytest.mark.parametrize("input_data, steps, expected_flash_count", flahes_after_steps_test_data)
def test_flashes_are_at_expected_values_after_steps(input_data, steps, expected_flash_count):
    g = Octogrid(input_data)

    flash_count = g.step_time(steps)
    assert flash_count == expected_flash_count
